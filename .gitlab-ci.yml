# CI/CD Pipeline para GitLab (opcional)
# Para AWS CodePipeline u otros, adapta segÃºn necesites

stages:
  - build
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  DOCKER_TAG_LATEST: $CI_REGISTRY_IMAGE:latest

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --platform linux/amd64,linux/arm64 -t $DOCKER_IMAGE -t $DOCKER_TAG_LATEST .
    - docker push $DOCKER_IMAGE
    - docker push $DOCKER_TAG_LATEST
  only:
    - main

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $EC2_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'ENDSSH'
        cd ~/Hackmty_Smart_Intelligence
        git pull
        docker-compose -f docker-compose.prod.yml down
        docker pull $CI_REGISTRY_IMAGE:latest
        docker-compose -f docker-compose.prod.yml up -d
        docker system prune -af
      ENDSSH
  only:
    - main
  when: manual

